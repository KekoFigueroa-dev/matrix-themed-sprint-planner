{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ke-ko\\\\OneDrive\\\\Escritorio\\\\AIprojects\\\\TODOAPP\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TodoItem from './components/TodoItem';\nimport AddTodoForm from './components/AddTodoForm';\nimport './styles.css';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport TeamPanel from './components/TeamPanel';\nimport SprintManager from './components/SprintManager';\nimport StatsPanel from './components/StatsPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State for Sprints, Todos, and Team Members\n  const [sprints, setSprints] = useState([]);\n  const [todos, setTodos] = useState([]);\n  const [teamMembers, setTeamMembers] = useState([]);\n  const [currentSprintId, setCurrentSprintId] = useState(null);\n\n  // One-time data migration and initialization from localStorage\n  useEffect(() => {\n    const savedSprints = localStorage.getItem('sprints');\n    let savedTodos = localStorage.getItem('todos');\n    const savedMembers = localStorage.getItem('teamMembers');\n    let allSprints = savedSprints ? JSON.parse(savedSprints) : [];\n    let allTodos = savedTodos ? JSON.parse(savedTodos) : [];\n    const allMembers = savedMembers ? JSON.parse(savedMembers) : [];\n\n    // --- Data Migration Logic ---\n    // If there are legacy todos but no sprints, migrate them.\n    if (allTodos.length > 0 && allSprints.length === 0) {\n      const initialSprint = {\n        id: Date.now(),\n        name: 'Initial Sprint'\n      };\n      allSprints = [initialSprint];\n      allTodos = allTodos.map(todo => ({\n        ...todo,\n        priority: todo.priority || 'Medium',\n        sprintId: initialSprint.id // Assign to the new sprint\n      }));\n      // Persist the migrated data right away\n      localStorage.setItem('sprints', JSON.stringify(allSprints));\n      localStorage.setItem('todos', JSON.stringify(allTodos));\n    }\n    setSprints(allSprints);\n    setTodos(allTodos);\n    setTeamMembers(allMembers);\n    if (allSprints.length > 0) {\n      const savedCurrentSprintId = localStorage.getItem('currentSprintId');\n      setCurrentSprintId(savedCurrentSprintId ? JSON.parse(savedCurrentSprintId) : allSprints[0].id);\n    }\n  }, []);\n\n  // Effect to save sprints to localStorage\n  useEffect(() => {\n    if (sprints.length > 0) {\n      localStorage.setItem('sprints', JSON.stringify(sprints));\n    } else {\n      localStorage.removeItem('sprints'); // Clean up if no sprints left\n    }\n  }, [sprints]);\n\n  // Effect to save todos to localStorage\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  // Effect to save team members to localStorage\n  useEffect(() => {\n    localStorage.setItem('teamMembers', JSON.stringify(teamMembers));\n  }, [teamMembers]);\n\n  // Effect to save the current sprint ID\n  useEffect(() => {\n    if (currentSprintId) {\n      localStorage.setItem('currentSprintId', JSON.stringify(currentSprintId));\n    }\n  }, [currentSprintId]);\n\n  // --- Sprint Management ---\n  const addSprint = name => {\n    const newSprint = {\n      id: Date.now(),\n      name\n    };\n    const newSprints = [...sprints, newSprint];\n    setSprints(newSprints);\n    setCurrentSprintId(newSprint.id); // Switch to the new sprint\n  };\n  const renameSprint = (id, newName) => {\n    setSprints(sprints.map(s => s.id === id ? {\n      ...s,\n      name: newName\n    } : s));\n  };\n  const deleteSprint = id => {\n    var _remainingSprints$;\n    // Prevent deleting the last sprint\n    if (sprints.length <= 1) {\n      alert(\"Cannot delete the last sprint.\");\n      return;\n    }\n    setTodos(todos.filter(t => t.sprintId !== id));\n    const remainingSprints = sprints.filter(s => s.id !== id);\n    setSprints(remainingSprints);\n    setCurrentSprintId(((_remainingSprints$ = remainingSprints[0]) === null || _remainingSprints$ === void 0 ? void 0 : _remainingSprints$.id) || null);\n  };\n\n  // --- Task Management ---\n  const addTodo = (text, priority, assigneeId) => {\n    if (!currentSprintId) return;\n    const newTodo = {\n      id: Date.now(),\n      text,\n      completed: false,\n      priority,\n      sprintId: currentSprintId,\n      assigneeId: assigneeId ? Number(assigneeId) : undefined\n    };\n    setTodos([newTodo, ...todos]);\n  };\n  const toggleTodo = id => {\n    setTodos(todos.map(todo => todo.id === id ? {\n      ...todo,\n      completed: !todo.completed\n    } : todo));\n  };\n  const deleteTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  // --- Team Management ---\n  const addTeamMember = (name, role) => {\n    const newMember = {\n      id: Date.now(),\n      name,\n      role\n    };\n    setTeamMembers([...teamMembers, newMember]);\n  };\n  const editTeamMember = (id, name, role) => {\n    setTeamMembers(teamMembers.map(member => member.id === id ? {\n      ...member,\n      name,\n      role\n    } : member));\n  };\n  const deleteTeamMember = id => {\n    // Also unassign tasks from the deleted member\n    setTodos(todos.map(todo => todo.assigneeId === id ? {\n      ...todo,\n      assigneeId: undefined\n    } : todo));\n    setTeamMembers(teamMembers.filter(member => member.id !== id));\n  };\n  const filteredTodos = todos.filter(todo => todo.sprintId === currentSprintId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sprint-planner-layout\",\n    children: [/*#__PURE__*/_jsxDEV(TeamPanel, {\n      teamMembers: teamMembers,\n      addTeamMember: addTeamMember,\n      editTeamMember: editTeamMember,\n      deleteTeamMember: deleteTeamMember\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"main-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sprint Planner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SprintManager, {\n          sprints: sprints,\n          currentSprintId: currentSprintId,\n          onSprintChange: setCurrentSprintId,\n          onAddSprint: addSprint,\n          onRenameSprint: renameSprint,\n          onDeleteSprint: deleteSprint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(AddTodoForm, {\n          addTodo: addTodo,\n          teamMembers: teamMembers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"todo-list\",\n          children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n            children: filteredTodos.length > 0 ? filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, {\n              todo: todo,\n              toggleTodo: toggleTodo,\n              deleteTodo: deleteTodo,\n              teamMembers: teamMembers\n            }, todo.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(motion.p, {\n              initial: {\n                opacity: 0,\n                y: -10\n              },\n              animate: {\n                opacity: 1,\n                y: 0\n              },\n              exit: {\n                opacity: 0,\n                y: 10\n              },\n              className: \"empty-state\",\n              children: sprints.length > 0 ? \"This sprint is empty. Add a task!\" : \"Create a sprint to get started.\"\n            }, \"empty\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StatsPanel, {\n      todos: filteredTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"gVcyAQnQPnZPMgzytrcwP+Addt8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TodoItem","AddTodoForm","AnimatePresence","motion","TeamPanel","SprintManager","StatsPanel","jsxDEV","_jsxDEV","App","_s","sprints","setSprints","todos","setTodos","teamMembers","setTeamMembers","currentSprintId","setCurrentSprintId","savedSprints","localStorage","getItem","savedTodos","savedMembers","allSprints","JSON","parse","allTodos","allMembers","length","initialSprint","id","Date","now","name","map","todo","priority","sprintId","setItem","stringify","savedCurrentSprintId","removeItem","addSprint","newSprint","newSprints","renameSprint","newName","s","deleteSprint","_remainingSprints$","alert","filter","t","remainingSprints","addTodo","text","assigneeId","newTodo","completed","Number","undefined","toggleTodo","deleteTodo","addTeamMember","role","newMember","editTeamMember","member","deleteTeamMember","filteredTodos","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSprintChange","onAddSprint","onRenameSprint","onDeleteSprint","p","initial","opacity","y","animate","exit","_c","$RefreshReg$"],"sources":["C:/Users/ke-ko/OneDrive/Escritorio/AIprojects/TODOAPP/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Todo, Priority, TeamMember, Sprint } from './types';\r\nimport TodoItem from './components/TodoItem';\r\nimport AddTodoForm from './components/AddTodoForm';\r\nimport './styles.css';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport TeamPanel from './components/TeamPanel';\r\nimport SprintManager from './components/SprintManager';\r\nimport StatsPanel from './components/StatsPanel';\r\n\r\nconst App: React.FC = () => {\r\n    // State for Sprints, Todos, and Team Members\r\n    const [sprints, setSprints] = useState<Sprint[]>([]);\r\n    const [todos, setTodos] = useState<Todo[]>([]);\r\n    const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\r\n    const [currentSprintId, setCurrentSprintId] = useState<number | null>(null);\r\n\r\n    // One-time data migration and initialization from localStorage\r\n    useEffect(() => {\r\n        const savedSprints = localStorage.getItem('sprints');\r\n        let savedTodos = localStorage.getItem('todos');\r\n        const savedMembers = localStorage.getItem('teamMembers');\r\n\r\n        let allSprints: Sprint[] = savedSprints ? JSON.parse(savedSprints) : [];\r\n        let allTodos: Todo[] = savedTodos ? JSON.parse(savedTodos) : [];\r\n        const allMembers: TeamMember[] = savedMembers ? JSON.parse(savedMembers) : [];\r\n\r\n        // --- Data Migration Logic ---\r\n        // If there are legacy todos but no sprints, migrate them.\r\n        if (allTodos.length > 0 && allSprints.length === 0) {\r\n            const initialSprint: Sprint = { id: Date.now(), name: 'Initial Sprint' };\r\n            allSprints = [initialSprint];\r\n            allTodos = allTodos.map(todo => ({\r\n                ...todo,\r\n                priority: todo.priority || 'Medium',\r\n                sprintId: initialSprint.id, // Assign to the new sprint\r\n            }));\r\n            // Persist the migrated data right away\r\n            localStorage.setItem('sprints', JSON.stringify(allSprints));\r\n            localStorage.setItem('todos', JSON.stringify(allTodos));\r\n        }\r\n\r\n        setSprints(allSprints);\r\n        setTodos(allTodos);\r\n        setTeamMembers(allMembers);\r\n\r\n        if (allSprints.length > 0) {\r\n            const savedCurrentSprintId = localStorage.getItem('currentSprintId');\r\n            setCurrentSprintId(savedCurrentSprintId ? JSON.parse(savedCurrentSprintId) : allSprints[0].id);\r\n        }\r\n\r\n    }, []);\r\n\r\n    // Effect to save sprints to localStorage\r\n    useEffect(() => {\r\n        if (sprints.length > 0) {\r\n            localStorage.setItem('sprints', JSON.stringify(sprints));\r\n        } else {\r\n             localStorage.removeItem('sprints'); // Clean up if no sprints left\r\n        }\r\n    }, [sprints]);\r\n    \r\n    // Effect to save todos to localStorage\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    // Effect to save team members to localStorage\r\n    useEffect(() => {\r\n        localStorage.setItem('teamMembers', JSON.stringify(teamMembers));\r\n    }, [teamMembers]);\r\n\r\n    // Effect to save the current sprint ID\r\n    useEffect(() => {\r\n        if (currentSprintId) {\r\n            localStorage.setItem('currentSprintId', JSON.stringify(currentSprintId));\r\n        }\r\n    }, [currentSprintId]);\r\n\r\n    // --- Sprint Management ---\r\n    const addSprint = (name: string) => {\r\n        const newSprint = { id: Date.now(), name };\r\n        const newSprints = [...sprints, newSprint];\r\n        setSprints(newSprints);\r\n        setCurrentSprintId(newSprint.id); // Switch to the new sprint\r\n    };\r\n\r\n    const renameSprint = (id: number, newName: string) => {\r\n        setSprints(sprints.map(s => s.id === id ? { ...s, name: newName } : s));\r\n    };\r\n\r\n    const deleteSprint = (id: number) => {\r\n        // Prevent deleting the last sprint\r\n        if (sprints.length <= 1) {\r\n            alert(\"Cannot delete the last sprint.\");\r\n            return;\r\n        }\r\n        setTodos(todos.filter(t => t.sprintId !== id));\r\n        const remainingSprints = sprints.filter(s => s.id !== id);\r\n        setSprints(remainingSprints);\r\n        setCurrentSprintId(remainingSprints[0]?.id || null);\r\n    };\r\n\r\n    // --- Task Management ---\r\n    const addTodo = (text: string, priority: Priority, assigneeId?: number) => {\r\n        if (!currentSprintId) return;\r\n        const newTodo: Todo = {\r\n            id: Date.now(),\r\n            text,\r\n            completed: false,\r\n            priority,\r\n            sprintId: currentSprintId,\r\n            assigneeId: assigneeId ? Number(assigneeId) : undefined,\r\n        };\r\n        setTodos([newTodo, ...todos]);\r\n    };\r\n\r\n    const toggleTodo = (id: number) => {\r\n        setTodos(\r\n            todos.map(todo =>\r\n                todo.id === id ? { ...todo, completed: !todo.completed } : todo\r\n            )\r\n        );\r\n    };\r\n\r\n    const deleteTodo = (id: number) => {\r\n        setTodos(todos.filter(todo => todo.id !== id));\r\n    };\r\n\r\n    // --- Team Management ---\r\n    const addTeamMember = (name: string, role: string) => {\r\n        const newMember: TeamMember = { id: Date.now(), name, role };\r\n        setTeamMembers([...teamMembers, newMember]);\r\n    };\r\n\r\n    const editTeamMember = (id: number, name: string, role: string) => {\r\n        setTeamMembers(teamMembers.map(member => \r\n            member.id === id ? { ...member, name, role } : member));\r\n    };\r\n\r\n\r\n\r\n    const deleteTeamMember = (id: number) => {\r\n        // Also unassign tasks from the deleted member\r\n        setTodos(todos.map(todo => todo.assigneeId === id ? {...todo, assigneeId: undefined} : todo));\r\n        setTeamMembers(teamMembers.filter(member => member.id !== id));\r\n    };\r\n\r\n\r\n    const filteredTodos = todos.filter(todo => todo.sprintId === currentSprintId);\r\n\r\n    return (\r\n        <div className=\"sprint-planner-layout\">\r\n            <TeamPanel \r\n                teamMembers={teamMembers}\r\n                addTeamMember={addTeamMember}\r\n                editTeamMember={editTeamMember}\r\n                deleteTeamMember={deleteTeamMember}\r\n            />\r\n            <main className=\"main-content-wrapper\">\r\n                <header className=\"main-header\">\r\n                    <h1>Sprint Planner</h1>\r\n                    <SprintManager\r\n                        sprints={sprints}\r\n                        currentSprintId={currentSprintId}\r\n                        onSprintChange={setCurrentSprintId}\r\n                        onAddSprint={addSprint}\r\n                        onRenameSprint={renameSprint}\r\n                        onDeleteSprint={deleteSprint}\r\n                    />\r\n                </header>\r\n                <div className=\"main-content\">\r\n                    <AddTodoForm addTodo={addTodo} teamMembers={teamMembers} />\r\n                    <ul className=\"todo-list\">\r\n                        <AnimatePresence>\r\n                            {filteredTodos.length > 0 ? (\r\n                                filteredTodos.map(todo => (\r\n                                    <TodoItem\r\n                                        key={todo.id}\r\n                                        todo={todo}\r\n                                        toggleTodo={toggleTodo}\r\n                                        deleteTodo={deleteTodo}\r\n                                        teamMembers={teamMembers}\r\n                                    />\r\n                                ))\r\n                            ) : (\r\n                                <motion.p\r\n                                    key=\"empty\"\r\n                                    initial={{ opacity: 0, y: -10 }}\r\n                                    animate={{ opacity: 1, y: 0 }}\r\n                                    exit={{ opacity: 0, y: 10 }}\r\n                                    className=\"empty-state\"\r\n                                >\r\n                                    {sprints.length > 0 ? \"This sprint is empty. Add a task!\" : \"Create a sprint to get started.\"}\r\n                                </motion.p>\r\n                            )}\r\n                        </AnimatePresence>\r\n                    </ul>\r\n                </div>\r\n            </main>\r\n            <StatsPanel todos={filteredTodos} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}